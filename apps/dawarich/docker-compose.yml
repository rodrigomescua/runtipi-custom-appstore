version: "3.7"
services:
  dawarich_redis:
    image: redis:7.4-alpine
    container_name: dawarich_redis
    command: redis-server
    volumes:
      - ${APP_DATA_DIR}/data/dawarich_shared:/data
    restart: always
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
  dawarich_db:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    container_name: dawarich_db
    volumes:
      - ${APP_DATA_DIR}/data/dawarich_db_data:/var/lib/postgresql/data
      - ${APP_DATA_DIR}/data/dawarich_shared:/var/shared
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dawarich_development
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d dawarich_development" ]
      interval: 10s
      retries: 5
      timeout: 10s
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
  dawarich:
    image: freikin/dawarich:0.30.8
    container_name: dawarich
    volumes:
      - ${APP_DATA_DIR}/data/dawarich_public:/var/app/public
      - ${APP_DATA_DIR}/data/dawarich_watched:/var/app/tmp/imports/watched
      - ${APP_DATA_DIR}/data/dawarich_storage:/var/app/storage
      - ${APP_DATA_DIR}/data/dawarich_db_data:/dawarich_db_data
    ports:
      - ${APP_PORT}:3000
      # - 9394:9394 # Prometheus exporter, uncomment if needed
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      MIN_MINUTES_SPENT_IN_CITY: 6
      APPLICATION_HOSTS: localhost,dawarich.murkmesc.top
      DISTANCE_UNIT: km
      TIME_ZONE: ${TZ}
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      interval: 10s
      retries: 30
      timeout: 10s
    depends_on:
      - dawarich_db
      - dawarich_redis
    networks:
      - tipi_main_network
    labels:
      # Main
      traefik.enable: true
      traefik.http.middlewares.dawarich-web-redirect.redirectscheme.scheme: https
      traefik.http.services.dawarich.loadbalancer.server.port: 3000
      # Web
      traefik.http.routers.dawarich-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.dawarich-insecure.entrypoints: web
      traefik.http.routers.dawarich-insecure.service: dawarich
      traefik.http.routers.dawarich-insecure.middlewares: dawarich-web-redirect
      # Websecure
      traefik.http.routers.dawarich.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.dawarich.entrypoints: websecure
      traefik.http.routers.dawarich.service: dawarich
      traefik.http.routers.dawarich.tls.certresolver: myresolver
      # Local domain
      traefik.http.routers.dawarich-local-insecure.rule: Host(`dawarich.${LOCAL_DOMAIN}`)
      traefik.http.routers.dawarich-local-insecure.entrypoints: web
      traefik.http.routers.dawarich-local-insecure.service: dawarich
      traefik.http.routers.dawarich-local-insecure.middlewares: dawarich-web-redirect
      # Local domain secure
      traefik.http.routers.dawarich-local.rule: Host(`dawarich.${LOCAL_DOMAIN}`)
      traefik.http.routers.dawarich-local.entrypoints: websecure
      traefik.http.routers.dawarich-local.service: dawarich
      traefik.http.routers.dawarich-local.tls: true
      runtipi.managed: true
  dawarich_sidekiq:
    image: freikin/dawarich:0.30.8
    container_name: dawarich_sidekiq
    volumes:
      - ${APP_DATA_DIR}/data/dawarich_public:/var/app/public
      - ${APP_DATA_DIR}/data/dawarich_watched:/var/app/tmp/imports/watched
      - ${APP_DATA_DIR}/data/dawarich_storage:/var/app/storage
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ['sidekiq']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      APPLICATION_HOSTS: localhost
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: dawarich
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f sidekiq" ]
      interval: 10s
      retries: 30
      timeout: 10s
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
    depends_on:
      - dawarich_db
      - dawarich_redis
      - dawarich