services:
  affine-custom:
    image: ghcr.io/toeverything/affine-graphql:stable
    container_name: affine-custom
    command:
      ["sh", "-c", "node ./scripts/self-host-predeploy.js"]
    ports:
      - ${APP_PORT}:3010
    depends_on:
      affine-custom-redis:
        condition: service_healthy
      affine-custom-postgres:
        condition: service_healthy
    volumes:
      # Custom configurations
      - ${APP_DATA_DIR}/data/config:/root/.affine/config
      # Blob storage
      - ${APP_DATA_DIR}/data/storage:/root/.affine/storage
    logging:
      driver: "json-file"
      options:
        max-size: "1000m"
    restart: unless-stopped
    environment:
      - AFFINE_CONFIG_PATH=/root/.affine/config
      - REDIS_SERVER_HOST=affine-custom-redis
      - DATABASE_URL=postgresql://tipi:${AFFINE_POSTGRES_PASSWORD}@affine-custom-postgres:5432/affine
      - NODE_ENV=production
      - AFFINE_ADMIN_EMAIL=${AFFINE_ADMIN_EMAIL}
      - AFFINE_ADMIN_PASSWORD=${AFFINE_ADMIN_PASSWORD}
      - TELEMETRY_ENABLE=${AFFINE_TELEMETRY_ENABLE}
    networks:
      - tipi_main_network
    labels:
      # Main
      traefik.enable: true
      traefik.http.middlewares.affine-custom-web-redirect.redirectscheme.scheme: https
      traefik.http.services.affine-custom.loadbalancer.server.port: 3010
      # Web
      traefik.http.routers.affine-custom-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.affine-custom-insecure.entrypoints: web
      traefik.http.routers.affine-custom-insecure.service: affine-custom
      traefik.http.routers.affine-custom-insecure.middlewares: affine-custom-web-redirect
      # Websecure
      traefik.http.routers.affine-custom.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.affine-custom.entrypoints: websecure
      traefik.http.routers.affine-custom.service: affine-custom
      traefik.http.routers.affine-custom.tls.certresolver: myresolver
      # Local domain
      traefik.http.routers.affine-custom-local-insecure.rule: Host(`affine.${LOCAL_DOMAIN}`)
      traefik.http.routers.affine-custom-local-insecure.entrypoints: web
      traefik.http.routers.affine-custom-local-insecure.service: affine-custom
      traefik.http.routers.affine-custom-local-insecure.middlewares: affine-custom-web-redirect
      # Local domain secure
      traefik.http.routers.affine-custom-local.rule: Host(`affine.${LOCAL_DOMAIN}`)
      traefik.http.routers.affine-custom-local.entrypoints: websecure
      traefik.http.routers.affine-custom-local.service: affine-custom
      traefik.http.routers.affine-custom-local.tls: true
      runtipi.managed: true
  affine-custom-redis:
    image: redis
    container_name: affine-custom-redis
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
  affine-custom-postgres:
    image: pgvector/pgvector:pg16
    container_name: affine-custom-postgres
    restart: unless-stopped
    volumes:
      - ${APP_DATA_DIR}/data/postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d postgresql://tipi:${AFFINE_POSTGRES_PASSWORD}@affine-custom-postgres:5432/affine",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: tipi
      POSTGRES_PASSWORD: ${AFFINE_POSTGRES_PASSWORD}
      POSTGRES_DB: affine
      POSTGRES_INITDB_ARGS: "--data-checksums"
    networks:
      - tipi_main_network
    labels:
      runtipi.managed: true
